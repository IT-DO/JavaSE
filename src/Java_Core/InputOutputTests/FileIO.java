package Java_Core.IO_Tests;

import java.io.File;
import java.io.IOException;

////Класс File
//Модификатор и тип
//        Метод
//Описание
//boolean
//canExecute()
//Проверяет, может ли приложение выполнить файл, обозначенный этим абстрактным путем.
//boolean
//canRead()
//Проверяет, может ли приложение прочитать файл, обозначенный этим абстрактным путем.
//boolean
//canWrite()
//Проверяет, может ли приложение изменить файл, обозначенный этим абстрактным путем.
//int
//compareTo(File pathname)
//Сравнивает два абстрактных имени пути лексикографически.
//boolean
//createNewFile()
//Атомарно создает новый пустой файл, названный этим абстрактным путем, тогда и только тогда, когда файл с таким именем еще не существует.
//static File
//createTempFile(String prefix, String suffix)
//Создает пустой файл в каталоге временных файлов по умолчанию, используя заданный префикс и суффикс для формирования его имени.
//static File
//createTempFile(String prefix, String suffix, File directory)
//Создает новый пустой файл в указанном каталоге, используя заданные строки префикса и суффикса для генерации его имени.
//boolean
//delete()
//Удаляет файл или каталог, обозначенный этим абстрактным путем.
//void
//deleteOnExit()
//Запрашивает удаление файла или каталога, обозначенного этим абстрактным путем, при завершении работы виртуальной машины.
//boolean
//equals(Object obj)
//Проверяет это абстрактное имя пути на равенство с заданным объектом.
//boolean
//exists()
//Проверяет, существует ли файл или каталог, обозначенный этим абстрактным путем.
//File
//getAbsoluteFile()
//Возвращает абсолютную форму этого абстрактного пути.
//String
//getAbsolutePath()
//Возвращает строку абсолютного пути этого абстрактного пути.
//        File
//getCanonicalFile()
//Возвращает каноническую форму этого абстрактного пути.
//String
//getCanonicalPath()
//Возвращает каноническую строку пути этого абстрактного пути.
//long
//getFreeSpace()
//Возвращает количество нераспределенных байтов в разделе, названном этим абстрактным путем.
//        String
//getName()
//Возвращает имя файла или каталога, обозначенного этим абстрактным путем.
//String
//getParent()
//Возвращает строку пути родительского каталога этого абстрактного пути или, nullесли этот путь не указывает родительский каталог.
//        File
//getParentFile()
//Возвращает абстрактное имя пути родителя данного абстрактного имени пути или, nullесли это имя пути не указывает родительский каталог.
//        String
//getPath()
//Преобразует это абстрактное имя пути в строку имени пути.
//long
//getTotalSpace()
//Возвращает размер раздела, названного этим абстрактным путем.
//long
//getUsableSpace()
//Возвращает количество байтов, доступных этой виртуальной машине в разделе, названном этим абстрактным путем.
//int
//hashCode()
//Вычисляет хэш-код для этого абстрактного имени пути.
//boolean
//isAbsolute()
//Проверяет, является ли это абстрактное имя пути абсолютным.
//boolean
//isDirectory()
//Проверяет, является ли файл, обозначенный этим абстрактным путем, каталогом.
//boolean
//isFile()
//Проверяет, является ли файл, обозначенный этим абстрактным путем, обычным файлом.
//boolean
//isHidden()
//Проверяет, является ли файл, названный этим абстрактным путем, скрытым файлом.
//long
//lastModified()
//Возвращает время последнего изменения файла, обозначенного этим абстрактным путем.
//long
//length()
//Возвращает длину файла, обозначенного этим абстрактным путем.
//String[]
//list()
//Возвращает массив строк с именами файлов и каталогов в каталоге, обозначенном этим абстрактным путем.
//        String[]
//list(FilenameFilter filter)
//Возвращает массив строк с именами файлов и каталогов в каталоге, обозначенном этим абстрактным путем, которые удовлетворяют указанному фильтру.
//File[]
//listFiles()
//Возвращает массив абстрактных путей, обозначающих файлы в каталоге, обозначенном этим абстрактным путем.
//File[]
//listFiles(FileFilter filter)
//Возвращает массив абстрактных путей, обозначающих файлы и каталоги в каталоге, обозначенном этим абстрактным путем, которые удовлетворяют указанному фильтру.
//        File[]
//listFiles(FilenameFilter filter)
//Возвращает массив абстрактных путей, обозначающих файлы и каталоги в каталоге, обозначенном этим абстрактным путем, которые удовлетворяют указанному фильтру.
//static File[]
//listRoots()
//Перечислите доступные корни файловой системы.
//boolean
//mkdir()
//        Создает каталог, названный этим абстрактным путем.
//boolean
//mkdirs()
//        Создает каталог, названный этим абстрактным путем, включая все необходимые, но несуществующие родительские каталоги.
//boolean
//renameTo(File dest)
//        Переименовывает файл, обозначенный этим абстрактным путем.
//boolean
//setExecutable(boolean executable)
//Удобный метод установки разрешения на выполнение для этого абстрактного пути.
//boolean
//setExecutable(boolean executable, boolean ownerOnly)
//Устанавливает разрешение на выполнение для этого абстрактного пути владельцу или всем.
//boolean
//setLastModified(long time)
//Устанавливает время последнего изменения файла или каталога, указанного этим абстрактным путем.
//boolean
//setReadable(boolean readable)
//Удобный метод установки разрешения на чтение для этого абстрактного пути.
//boolean
//setReadable(boolean readable, boolean ownerOnly)
//Устанавливает разрешение на чтение для этого абстрактного пути для владельца или всех.
//boolean
//setReadOnly()
//Помечает файл или каталог, названный этим абстрактным путем, так, что разрешены только операции чтения.
//boolean
//setWritable(boolean writable)
//Удобный метод установки разрешения на запись для этого абстрактного пути.
//boolean
//setWritable(boolean writable, boolean ownerOnly)
//Устанавливает разрешение на запись для этого абстрактного пути для владельца или всех.
//Path
//toPath()
//Возвращает java.nio.file.Pathобъект, созданный на основе этого абстрактного пути.
//String
//toString()
//Возвращает строку пути этого абстрактного пути.
//URI
//toURI()
//Создает file:URI, представляющий это абстрактное имя пути.
//        URL
//toURL()
//Устарело.
//Этот метод не экранирует автоматически символы, недопустимые в URL-адресах.

public class FileIO {
    public static void main(String[] args) throws IOException {
        File dir = new File("res/testNewFile.txt");
        dir.mkdir(); // создаем директорию по адресу "d:/testdir"

        for (int i = 0; i < 10; i++) { // creating testfiles in directory "dir"
            File file = new File(dir, "testfile_" + i + ".txt");
            file.createNewFile();
        }


        File[] paths; //Displaying files list from directory "dir" in console
        paths = dir.listFiles();
        for (File path : paths) {
            System.out.println(path);
        }

        //same

        for(File f :dir.listFiles()){
            System.out.println(f.getPath()); // вывод полного пути файла
            System.out.println(f.getName()); // вывод только имени файла БЕЗ ПУТИ
        }
    }


}
